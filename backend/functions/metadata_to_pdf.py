import os
from datetime import datetime
from markdown_pdf import MarkdownPdf, Section

def create_dpp_pdf(topic_name: str, questions: list, total_q: int, instructions: str, output_dir: str = "dpp_pdfs") -> str:
    """
    Creates a beautiful DPP (Daily Practice Problems) PDF document using markdown-pdf.
    
    Args:
        topic_name (str): The topic name for the DPP
        questions (list): List of questions to include in the DPP
        total_q (int): Maximum number of questions to include
        instructions (str): Instructions for the DPP
        output_dir (str): Directory to save the PDF (default: "dpp_pdfs")
        
    Returns:
        str: Path to the created PDF file
        
    Raises:
        ValueError: If inputs are invalid
        Exception: If PDF creation fails
    """
    
    # Input validation
    if not topic_name or not isinstance(topic_name, str):
        raise ValueError("topic_name must be a non-empty string")
    
    if not isinstance(questions, list):
        raise ValueError("questions must be a list")
    
    if not isinstance(total_q, int) or total_q < 0:
        raise ValueError("total_q must be a non-negative integer")
    
    if not isinstance(instructions, str):
        raise ValueError("instructions must be a string")
    
    if not isinstance(output_dir, str):
        raise ValueError("output_dir must be a string")
    
    # Limit questions
    if len(questions) > total_q:
        questions = questions[:total_q]
    
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Generate filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"DPP_{topic_name.replace(' ', '')}{timestamp}.pdf"
    pdf_path = os.path.join(output_dir, filename)
    
    # Create markdown content
    md_content = f"""
# Daily Practice Problems

## Topic: {topic_name}

*Date:* {datetime.now().strftime('%B %d, %Y')}

---

### Instructions:
{instructions}

---

## Questions:
"""
    
    # Add questions to markdown content
    for i, question in enumerate(questions, 1):
        # Ensure question is string and properly formatted
        question_str = str(question) if question is not None else ""
        md_content += f"\n{i}. {question_str}\n\n"
    
    # Add footer
    md_content += f"\n---\n*Generated by DPPify â€¢ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*"
    
    try:
        # Create PDF
        pdf = MarkdownPdf(toc_level=0)  # Keeping as is, but could be made configurable
        pdf.add_section(Section(md_content))
        pdf.save(pdf_path)
        
        # Verify file was created
        if not os.path.exists(pdf_path):
            raise Exception("PDF file was not created successfully")
            
        return pdf_path
        
    except Exception as e:
        raise Exception(f"Failed to create PDF: {str(e)}")